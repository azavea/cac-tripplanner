---
# # Note bzip2 only installed here as workaround for unresolved but closed phantomjs
# install issue: https://github.com/Medium/phantomjs/issues/659
- name: Install packages
  apt:
    state: present
    pkg:
      - binutils
      - bzip2
      - chromium-browser
      - g++
      - gdal-bin
      - libpq-dev
      - libproj-dev
      - python-dev
      - python3-pip
      - libjpeg-dev

- name: Install pip packages to python3 for deployment
  pip: requirements={{ root_app_dir }}/deployment_requirements.txt executable=/usr/bin/pip3

- name: Install pip packages
  pip: requirements={{ root_app_dir }}/requirements.txt

- name: Touch log file and set permissions
  file: path={{ app_log }} state=touch owner={{ app_username }} group={{ app_username }} mode=0664

- name: Create configuration file directory
  file: path={{ root_conf_dir }}
        owner={{ app_username }}
        group={{ app_username }}
        mode=0750
        state=directory

- name: Create app media directory
  file: path={{ root_media_dir }}
        owner={{ app_username }}
        group={{ app_username }}
        mode=0775
        state=directory

- name: Write secrets file
  template: src=cac_secrets.j2 dest=/etc/cac_secrets
  when: develop or production
  notify: Restart {{ gunicorn_app_name }}

- name: Configure Gunicorn settings
  template: src=gunicorn-cac-tripplanner.py.j2 dest={{ root_conf_dir }}/gunicorn.py
  notify: Restart {{ gunicorn_app_name }}

- name: Configure service definition
  template: src=systemd-{{ gunicorn_app_name }}.conf.j2
            dest=/etc/systemd/system/{{ gunicorn_app_name }}.service
  notify: Restart {{ gunicorn_app_name }}

- name: Enable gunicorn service
  systemd:
    name: "{{ gunicorn_app_name }}.service"
    enabled: yes
    daemon_reload: yes

- name: Enable nginx service
  systemd:
    name: "nginx.service"
    enabled: yes

- name: Copy media assets
  copy: src=../../python/cac_tripplanner/default_media
        dest=/media/cac
        owner={{ app_username }}
        group={{ app_username }}
  when: develop or test

- name: Run migrations
  django_manage: command=migrate
                 app_path="{{ root_app_dir }}"
  notify: Restart {{ gunicorn_app_name }}
  when: develop or test

- name: Run collectstatic
  django_manage: command=collectstatic
                 app_path="{{ root_app_dir }}"

- name: Copy nginx config
  template: src=nginx-default.j2 dest=/etc/nginx/sites-available/default
  notify: Restart nginx

- { import_tasks: jslibs.yml }

- { import_tasks: dev-test-dependencies.yml, when: develop or test }
