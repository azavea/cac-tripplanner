---
- name: Install nginx prerequisites
  apt:
    state: present
    pkg:
      - curl
      - gnupg2
      - ca-certificates
      - lsb-release

- name: Set up nginx apt repository
  become: yes
  command: echo "deb http://nginx.org/packages/ubuntu `lsb_release -cs` nginx" tee /etc/apt/sources.list.d/nginx.list
  args:
    creates: /etc/apt/sources.list.d/nginx.list

- name: Add nginx signing key
  apt_key:
    url: https://nginx.org/keys/nginx_signing.key
    state: present
    id: ABF5BD827BD9BF62

- name: Update APT cache
  apt: update_cache=yes

- name: Install packages
  apt:
    state: present
    pkg:
      - binutils
      - chromium-browser
      - dh-autoreconf
      - g++
      - gdal-bin
      - libpq-dev
      - libproj-dev
      - libjpeg-dev
      - nginx-full
      - osmctools

- name: Install pip packages for deployment
  pip: requirements={{ root_app_dir }}/deployment_requirements.txt executable=/usr/bin/pip3

- name: Install pip packages for app
  pip: requirements={{ root_app_dir }}/requirements.txt executable=/usr/bin/pip3

- name: Touch log file and set permissions
  file: path={{ app_log }} state=touch owner={{ app_username }} group={{ app_username }} mode=0664

- name: Create configuration file directory
  file: path={{ root_conf_dir }}
        owner={{ app_username }}
        group={{ app_username }}
        mode=0750
        state=directory

- name: Create app media directory
  file: path={{ root_media_dir }}
        owner={{ app_username }}
        group={{ app_username }}
        mode=0775
        state=directory

- name: Write secrets file
  template: src=cac_secrets.j2 dest=/etc/cac_secrets
  when: develop or production
  notify: Restart {{ gunicorn_app_name }}

- name: Configure Gunicorn settings
  template: src=gunicorn-cac-tripplanner.py.j2 dest={{ root_conf_dir }}/gunicorn.py
  notify: Restart {{ gunicorn_app_name }}

- name: Configure service definition
  template: src=systemd-{{ gunicorn_app_name }}.conf.j2
            dest=/etc/systemd/system/{{ gunicorn_app_name }}.service
  notify: Restart {{ gunicorn_app_name }}

- name: Enable gunicorn service
  systemd:
    name: "{{ gunicorn_app_name }}.service"
    enabled: yes
    daemon_reload: yes

- name: Delete default site
  file: path=/etc/nginx/sites-enabled/default state=absent
  register: delete_default_site
  when: nginx_delete_default_site | bool
  notify:
    - Restart nginx

- name: Delete default web root
  file: path=/var/www/html state=absent
  when: nginx_delete_default_site | bool and delete_default_site is changed

- name: Check Nginx Upstart service definition exists
  stat: path=/etc/init/nginx.conf
  register: nginx_upstart

- name: Configure Nginx log rotation
  template: src=logrotate_nginx.j2 dest=/etc/logrotate.d/nginx
  when: nginx_upstart.stat.exists

- name: Configure Nginx
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  notify:
    - Restart nginx

- name: Enable nginx service
  systemd:
    name: "nginx.service"
    enabled: yes

- name: Copy media assets
  copy: src=../../python/cac_tripplanner/default_media
        dest=/media/cac
        owner={{ app_username }}
        group={{ app_username }}
  when: develop or test

- name: Run migrations
  django_manage: command=migrate
                 app_path="{{ root_app_dir }}"
  notify: Restart {{ gunicorn_app_name }}
  when: develop or test

- name: Run collectstatic
  django_manage: command=collectstatic
                 app_path="{{ root_app_dir }}"

- name: Copy nginx config
  template: src=nginx-default.j2 dest=/etc/nginx/sites-available/default
  notify: Restart nginx

- { import_tasks: jslibs.yml }

- { import_tasks: dev-test-dependencies.yml, when: develop or test }
